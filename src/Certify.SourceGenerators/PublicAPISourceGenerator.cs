using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Certify.SourceGenerators;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace SourceGenerator
{
    public class GeneratedAPI
    {
        public string OperationName { get; set; } = string.Empty;
        public string OperationMethod { get; set; } = string.Empty;
        public string Comment { get; set; } = string.Empty;
        public string PublicAPIController { get; set; } = string.Empty;

        public string PublicAPIRoute { get; set; } = string.Empty;
        public string ServiceAPIRoute { get; set; } = string.Empty;
        public string ReturnType { get; set; } = string.Empty;
        public Dictionary<string, string> Params { get; set; } = new Dictionary<string, string>();
    }
    [Generator]
    public class PublicAPISourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {

            // get list of items we want to generate for our API glue
            var list = ApiMethods.GetApiDefinitions();

            Debug.WriteLine(context.Compilation.AssemblyName);

            foreach (var config in list)
            {
                var paramSet = config.Params.ToList();
                paramSet.Add(new KeyValuePair<string, string>("authContext", "AuthContext"));
                var apiParamDecl = paramSet.Any() ? string.Join(", ", paramSet.Select(p => $"{p.Value} {p.Key}")) : "";
                var apiParamDeclWithoutAuthContext = config.Params.Any() ? string.Join(", ", config.Params.Select(p => $"{p.Value} {p.Key}")) : "";

                var apiParamCall = paramSet.Any() ? string.Join(", ", paramSet.Select(p => $"{p.Key}")) : "";
                var apiParamCallWithoutAuthContext = config.Params.Any() ? string.Join(", ", config.Params.Select(p => $"{p.Key}")) : "";

                if (context.Compilation.AssemblyName.EndsWith("Api.Public"))
                {
                    context.AddSource($"{config.PublicAPIController}Controller.{config.OperationName}.g.cs", SourceText.From($@"

using Certify.Client;
using Certify.Server.Api.Public.Controllers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Certify.Models;
using Certify.Models.Config.AccessControl;


            namespace Certify.Server.Api.Public.Controllers
            {{
                public partial class {config.PublicAPIController}Controller
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    [{config.OperationMethod}]
                    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
                    [ProducesResponseType(StatusCodes.Status200OK, Type = typeof({config.ReturnType}))]
                    [Route(""""""{config.PublicAPIRoute}"""""")]
                    public async Task<IActionResult> {config.OperationName}({apiParamDeclWithoutAuthContext})
                    {{
                        var result = await _client.{config.OperationName}({apiParamCall.Replace("authContext", "CurrentAuthContext")});
                        return new OkObjectResult(result);
                    }}
                }}
            }}", Encoding.UTF8));

                }

                if (context.Compilation.AssemblyName.EndsWith("Certify.Client"))
                {

                    if (config.OperationMethod == "HttpGet")
                    {
                        context.AddSource($"{config.PublicAPIController}.{config.OperationName}.ICertifyInternalApiClient.g.cs", SourceText.From($@"
using Certify.Models;
using Certify.Models.Config.AccessControl;
using System.Collections.Generic;
using System.Threading.Tasks;

            namespace Certify.Client
            {{
                public partial interface ICertifyInternalApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    Task<{config.ReturnType}> {config.OperationName}({apiParamDecl});
                    
                }}

                public partial class CertifyApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    public async Task<{config.ReturnType}> {config.OperationName}({apiParamDecl})
                    {{
                        var result = await FetchAsync($""{config.ServiceAPIRoute}"", authContext);
                        return JsonToObject<{config.ReturnType}>(result);
                    }}
                    
                }}
            }}", Encoding.UTF8));
                    }

                    if (config.OperationMethod == "HttpPost")
                    {
                        context.AddSource($"{config.PublicAPIController}.{config.OperationName}.ICertifyInternalApiClient.g.cs", SourceText.From($@"
using Certify.Models;
using Certify.Models.Config.AccessControl;
using System.Collections.Generic;
using System.Threading.Tasks;

            namespace Certify.Client
            {{
                public partial interface ICertifyInternalApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    Task<{config.ReturnType}> {config.OperationName}({apiParamDecl});
                    
                }}


                public partial class CertifyApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    public async Task<{config.ReturnType}> {config.OperationName}({apiParamDecl})
                    {{
                        var result = await PostAsync($""{config.ServiceAPIRoute}"", {apiParamCall});
                        return JsonToObject<{config.ReturnType}>(await result.Content.ReadAsStringAsync());
                    }}
                    
                }}
            }}", Encoding.UTF8));
                    }

                    if (config.OperationMethod == "HttpDelete")
                    {
                        context.AddSource($"{config.PublicAPIController}.{config.OperationName}.ICertifyInternalApiClient.g.cs", SourceText.From($@"
using Certify.Models;
using Certify.Models.Config.AccessControl;
using System.Collections.Generic;
using System.Threading.Tasks;

            namespace Certify.Client
            {{
                public partial interface ICertifyInternalApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    Task<{config.ReturnType}> {config.OperationName}({apiParamDecl});
                    
                }}


                public partial class CertifyApiClient
                {{
                    /// <summary>
                    /// {config.Comment} [Generated by Certify.SourceGenerators]
                    /// </summary>
                    /// <returns></returns>
                    public async Task<{config.ReturnType}> {config.OperationName}({apiParamDecl})
                    {{
                    
                        var route = $""{config.ServiceAPIRoute}"";

                        var result = await DeleteAsync(route, authContext);
                        return JsonToObject<{config.ReturnType}>(await result.Content.ReadAsStringAsync());

                    }}
                    
                }}
            }}", Encoding.UTF8));
                    }
                }

                if (context.Compilation.AssemblyName.EndsWith("Certify.UI.Blazor"))
                {
                    context.AddSource($"AppModel.{config.OperationName}.g.cs", SourceText.From($@"
using System.Collections.Generic;
using System.Threading.Tasks;
using Certify.Models;
using Certify.Models.Config.AccessControl;

            namespace Certify.UI.Client.Core
    {{
        public partial class AppModel
        {{
            public async Task<{config.ReturnType}> {config.OperationName}({apiParamDeclWithoutAuthContext})
            {{
                return await _api.{config.OperationName}Async({apiParamCallWithoutAuthContext});
            }}
        }}
    }}", Encoding.UTF8));
                }
            }
        }
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            // uncomment this to launch a debug session which code generation runs
            // then add a watch on 
            if (!Debugger.IsAttached)
            {
                // Debugger.Launch();
            }
#endif
        }
    }
}
